version: '3.8'

services:
  # 蓝色后端服务（当前版本）
  backend-blue:
    build: 
      context: ./visitorSystem-backend
      dockerfile: Dockerfile
    container_name: visitor-system-backend-blue
    restart: always
    depends_on:
      - db
      - redis
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/visitorsystem
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    volumes:
      - ./visitorSystem-backend/uploads:/app/uploads
      - ./visitorSystem-backend/temp:/app/temp
    networks:
      - app-network
    ports:
      - "3001:3000"  # 蓝色版本使用3001端口

  # 绿色后端服务（新版本）
  backend-green:
    build: 
      context: ./visitorSystem-backend
      dockerfile: Dockerfile
    container_name: visitor-system-backend-green
    restart: always
    depends_on:
      - db
      - redis
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/visitorsystem
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    volumes:
      - ./visitorSystem-backend/uploads:/app/uploads
      - ./visitorSystem-backend/temp:/app/temp
    networks:
      - app-network
    ports:
      - "3002:3000"  # 绿色版本使用3002端口
      
  # Nginx负载均衡器
  nginx:
    image: nginx:alpine
    container_name: visitor-system-nginx
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - backend-blue
      - backend-green
      - frontend-blue
      - frontend-green
    networks:
      - app-network
    ports:
      - "80:80"
      - "443:443"

  # 蓝色前端服务
  frontend-blue:
    build:
      context: ./visitorSystem-frontend
      dockerfile: Dockerfile
    container_name: visitor-system-frontend-blue
    restart: always
    networks:
      - app-network
    ports:
      - "8001:80"  # 蓝色前端使用8001端口

  # 绿色前端服务
  frontend-green:
    build:
      context: ./visitorSystem-frontend
      dockerfile: Dockerfile
    container_name: visitor-system-frontend-green
    restart: always
    networks:
      - app-network
    ports:
      - "8002:80"  # 绿色前端使用8002端口

  # 数据库服务
  db:
    image: postgres:14-alpine
    container_name: visitor-system-db
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=visitorsystem
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"

  # Redis服务
  redis:
    image: redis:alpine
    container_name: visitor-system-redis
    restart: always
    networks:
      - app-network
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  redisdata:
