# # Docker Compose file 
# 注意：version属性已过时，无需指定

services:
  # 后端服务
  backend:
    build: 
      context: ./visitorSystem-backend
      dockerfile: Dockerfile
    container_name: visitor-system-backend
    restart: always
    # 直接使用已存在的dist目录
    command: sh -c "if [ -d dist ]; then node dist/main.js || node dist/src/main.js || ls -la dist; else echo '找不到dist目录' && ls -la .; fi"
    depends_on:
      - db
      - redis
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/visitorsystem
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your_jwt_secret_key_here
      - EMAIL_HOST=mail.wisesystemtech.com
      - EMAIL_PORT=587
      - EMAIL_USER=erpsystem@wisesystemtech.com
      - EMAIL_PASSWORD=your_email_password
    volumes:
      - ./visitorSystem-backend/uploads:/app/uploads
      - ./visitorSystem-backend/temp:/app/temp
    networks:
      - app-network
    ports:
      - "3000:3000"

  # 前端服务
  frontend:
    build:
      context: ./visitorSystem-frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=/api
    container_name: visitor-system-frontend
    restart: always
    depends_on:
      - backend
    networks:
      - app-network
    ports:
      - "80:80"

  # 数据库服务
  db:
    image: postgres:14-alpine
    container_name: visitor-system-db
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=visitorsystem
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"

  # Redis服务
  redis:
    image: redis:alpine
    container_name: visitor-system-redis
    restart: always
    networks:
      - app-network
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  redisdata:
